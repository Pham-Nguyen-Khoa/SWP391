extends ../../layouts/default.pug
include ../../mixins/mixin-title.pug
include ../../mixins/alert.pug

block main
    +alert-success("5000")
    +alert-error('5000')
    +title("Thanh Toán")
    //- pre
    //-     code #{JSON.stringify(currentAppointment,null,2)}
    .card.shadow(style="width:70%;margin: 0 auto;")
        .card-body(style="background-color: #d0f2f7ba;border:2px solid #4294b1c7;padding-bottom: 30px;")
        h2.card-title.text-center.mb-4.mt-4 Vui lòng nhập khoảng cách di chuyển 
        .row(style="margin: 0 auto")
            .col-auto
                    //- input.form-control(type="number" id="distance" style="width: 200px; display: inline-block;" min="1" value="1")
                    //- button(id="auto-distance" class="btn btn-primary" style="display: inline-block;") 
                    //-     i.fa.fa-calculator(style="margin-right: 5px;")  
                        
                    .d-flex.align-items-start(style="border: 2px solid black; position: relative; ")
                        input.form-control(type="number" id="distance" style="width: 200px; display: inline-block; border-radius:0   ;  height: 39px;" min="1" value="1")
                        button(id="auto-distance"  style="display: inline-block; height: 39px;     width: 50px;    background-color: #e92c46d9; cursor: pointer") 
                            i.fa.fa-calculator(style="margin-right: 5px;")  
                        b(style="    position: absolute;    left: 53%;top: 10%; font-size: 22px;") km
                                
            .col-auto
                button(name=cal-distance id="cal-distance" class="btn btn-primary" style="display: inline-block;") Cập nhật
        .modal-pay
            h2.card-title.text-center.mb-4.mt-4 Xác nhận thanh toán
            form#formTotal(action="/doctor/current-appointment", method="POST")(style="padding: 20px;")
                input#previousPageData(type="hidden", name="previousPageData")
                input#selectedMedications(type="hidden", name="selectedMedications")
                input#pondCount(type="hidden", name="pondCount")
                input#totalFeeHidden(type="hidden" name="totalFee" )
                input#distanceHidden(type="hidden" name="distance" )
                .form-group.mb-4
                    h3.form-label Chi tiết thanh toán:
                    ul.list-group.shadow-sm.ul-payment
                        each detail in objectPayment.serviceDetails
                            li.list-group-item.d-flex.justify-content-between.align-items-center.bg-light
                                b.text-muted.h5.mb-0 #{detail.description}
                                h3#serviceFee.badge.badge-primary.badge-pill(style="font-size: 18px;") #{detail.amount} VNĐ
                        li.list-group-item.d-flex.justify-content-between.align-items-center.bg-light.liToltalFee
                            b.font-weight-bold.h4.mb-0 Tổng cộng:
                            h3#totalFee.badge.badge-success.badge-pill.h5.mb-0(style="font-size: 18px;")  #{objectPayment.totalFee} VNĐ
                    //-     input#totalFee(type="hidden", name="totalFee" value=objectPayment.totalFee)
                .form-group.mb-4
                    h2.form-label.d-block.text-center.mb-4 Hình thức thanh toán:
                    .btn-group.btn-group-toggle.w-100(data-toggle="buttons")
                        label.btn.btn-outline-primary.w-50
                            input#cashPayment(type="radio", name="paymentMethod", value="cash", required)
                            i.fas.fa-money-bill-wave.mr-2
                            | Tiền mặt
                        label.btn.btn-outline-primary.w-50
                            input#transferPayment(type="radio", name="paymentMethod", value="transfer", required)
                            i.fas.fa-exchange-alt.mr-2
                            | Chuyển khoản

                .text-center.mt-4
                    button.btn.btn-primary.btn-lg.px-5(type="submit" id="submitAll")
                        i.fas.fa-check.mr-2
                        | Hoàn tất đơn
                a.btn.btn-lg(href="/doctor/current-appointment/prescribe-medication" style="background-color: #4294b1c7; color: black; padding: 10px;") Quay lại

            script.
                   
                  document.addEventListener('DOMContentLoaded', function() {
                    
                    const previousPageData = localStorage.getItem(`appointmentData`);
                    const previousPageDataInput = document.getElementById('previousPageData');
                    const prescibeMedication = localStorage.getItem(`prescriptionData`);
                    const prescriptionDataInput = document.getElementById('selectedMedications');
                    const pondCount = localStorage.getItem(`pondCount`);
                    const pondCountInput = document.getElementById('pondCount');
                    
                    if (previousPageData) {
                        previousPageDataInput.value = previousPageData;
                    }
                    if (prescibeMedication) {
                        prescriptionDataInput.value = prescibeMedication;
                    }
                    if (pondCount) {
                        pondCountInput.value = pondCount;
                    }
                    document.getElementById('prescriptionForm').addEventListener('submit', function() {
                        localStorage.clear();
                    });
                    });

                const submitAll = document.getElementById('submitAll');
                const formTotal = document.getElementById('formTotal');
                submitAll.addEventListener('click', function() {
                     localStorage.clear();
                     formTotal.submit();
                });

                   const paymentMethods = document.querySelectorAll('input[name="paymentMethod"]');
                        paymentMethods.forEach(method => {
                            method.addEventListener('change', function() {
                                paymentMethods.forEach(m => m.parentElement.classList.remove('active-payment'));
                                if (this.checked) {
                                    this.parentElement.classList.add('active-payment');
                                }
                            });
                        });

                const inputDistance = document.querySelector("#distance");
                const calBtn = document.querySelector("#cal-distance");
                const totalFee =  document.querySelector(".liToltalFee");
                const textTotalFee = totalFee.querySelector("#totalFee");
                const TotalFeeOrigin = totalFee.querySelector("#totalFee").textContent;
                const totalFeeOrigin = parseFloat(TotalFeeOrigin.replace(/\./g, '').replace(' VNĐ', ''));
                const initialTotalFee = totalFeeOrigin;
                const totalFeeHidden = document.getElementById('totalFeeHidden');
                    console.log(totalFeeHidden)
                    const distanceHidden = document.getElementById('distanceHidden');
                    console.log(distanceHidden)
                console.log(calBtn)
                calBtn.addEventListener("click",() => {
                    const ulPay = document.querySelector(".ul-payment");
                   
                    
                    const checkNewLiExist = document.querySelector("#distanceLi");
                    let distance = inputDistance.value
                    distanceHidden.value = distance;
                    //- let distanceFee = 0;
                    //- if(distance <= 10 &&  distance >=1 ){
                    //-     distanceFee = 100000
                    //- }else if( distance > 10 && distance <= 20){
                    //-     distanceFee = 200000
                    //- }else{
                    //-     distanceFee = 300000
                    //- }

                    const baseFee = 100000; // Phí cơ bản cho 10km
                    const additionalFee = Math.ceil(distance / 10) * baseFee; 
                    console.log(additionalFee)
                    const formattedFee = additionalFee.toLocaleString('it-IT'); 

                    if(checkNewLiExist){
                        let textFeeNewLi = checkNewLiExist.querySelector(".newLi");
                        textFeeNewLi.textContent = formattedFee +" VNĐ"
                        let distanceOrigin = parseFloat(additionalFee);
                        const totalFeeOrigin = parseFloat(TotalFeeOrigin.replace(/\./g, '').replace(' VNĐ', ''));
                        const totalFormat = formatCurrency(distanceOrigin + initialTotalFee);
                        textTotalFee.textContent = totalFormat + " VNĐ"
                        totalFeeHidden.value = distanceOrigin + initialTotalFee;
                    }else{
                         console.log(inputDistance.value)
                    const newLi = document.createElement("li");
                    newLi.className = "list-group-item d-flex justify-content-between align-items-center bg-light ";
                    newLi.id ="distanceLi"
                    newLi.innerHTML = ` <b class="text-muted h5 mb-0">Phí di chuyển</b>
                                        <h3 id  ="serviceFee"  class="badge badge-primary badge-pill newLi" style="font-size: 18px;">${formattedFee} VNĐ</h3>`
                    let distanceOrigin = parseFloat(additionalFee);
                    const totalFeeOrigin = parseFloat(TotalFeeOrigin.replace(/\./g, '').replace(' VNĐ', ''));
                    const totalFormat = formatCurrency(distanceOrigin + initialTotalFee);
                    textTotalFee.textContent = totalFormat + " VNĐ"
                    totalFeeHidden.value = distanceOrigin + initialTotalFee;
                    
                     if (totalFee) {
                        ulPay.insertBefore(newLi, totalFee);
                    }
                    }            
                })
                 function formatCurrency(amount) {
                    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") ;
                }


                const autoDistanceBtn = document.querySelector("#auto-distance");
                var  distanceAuto = 0;
                const currentAppointmentJson = !{JSON.stringify(currentAppointment)};
                autoDistanceBtn.addEventListener("click",() => {
                const settingGeneral = !{JSON.stringify(SettingGeneral)}; 
                    const originAddress = settingGeneral.Address
                    const destinationAddress = currentAppointmentJson.Address;
                    console.log(destinationAddress);
                    
                    Promise.all([
                        fetch(`https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(originAddress)}&key=5f86e5613fca4318a89493ef1f4053da`),
                        fetch(`https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(destinationAddress)}&key=5f86e5613fca4318a89493ef1f4053da`)
                    ])
                    .then(responses => {
                        if (!responses[0].ok || !responses[1].ok) {
                            throw new Error('Yêu cầu đến API không thành công.');
                        }
                        return Promise.all(responses.map(res => res.json()));
                    })
                    .then(data => {
                        const originResult = data[0].results[0];
                        const destinationResult = data[1].results[0];

                        if (originResult && destinationResult) {
                            const originCoords = originResult.geometry;
                            const destinationCoords = destinationResult.geometry;

                            if (originCoords && destinationCoords) {
                                const origin = `${originCoords.lng},${originCoords.lat}`;
                                const destination = `${destinationCoords.lng},${destinationCoords.lat}`;

                                return fetch(`http://router.project-osrm.org/route/v1/driving/${origin};${destination}?overview=false`);
                            } else {
                                console.log('Không tìm thấy tọa độ cho một trong các địa chỉ.');
                            }
                        } else {
                            console.log('Không tìm thấy kết quả cho một trong các địa chỉ.');
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Không thể lấy dữ liệu lộ trình.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data && data.routes && data.routes.length > 0) {
                             distanceAuto = data.routes[0].distance; // Khoảng cách tính bằng mét
                             console.log(distanceAuto);
                             console.log(`Khoảng cách: ${(distanceAuto / 1000).toFixed(2)} km`); // Chuyển đổi sang km
                             inputDistance.value = (distanceAuto / 1000).toFixed(2);
                        } else {
                            console.log('Không tìm thấy lộ trình hoặc dữ liệu không hợp lệ.');
                        }
                    })
                    .catch(error => console.error('Error:', error));
                });